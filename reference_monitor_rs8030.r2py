"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

#commented out the locks to try to see if gradescope will accept
class ABFile():
    #initialize
  def __init__(self,filename,create): 
    # globals
    #mycontext['myLock'] = createlock()
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    #self.valid = False
    #self.data = ''
  
    self.Lock= createLock()
    self.Lock.acquire(True)
    if self.Afn in listfiles():
        removefile(self.Afn)
    if self.Bfn in listfiles(): 
        removefile(self.Bfn)
        
        
    # make the files and add 'SE' to the readat file...
    if create:
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
        self.Afile.writeat('SE', 0)
        #mycontext['myLock'].release()
    self.Lock.release()
        
    else: 
       self.Afile = openfile(self.Afn, False)
       self.Bfile = openfile(self.Bfn, False)

  def writeat(self,data,offset):
    self.Lock.acquire(True)
    self.Bfile.writeat(data, offset)
    self.Lock.release()
  
  def readat(self,bytes,offset):
    self.Lock.acquire(True)
    ret = self.Afile.readat(bytes, offset)
    self.Lock.release()
    return ret 
    
    def close(self):
        l=len(self.Bfile.readat(None, 0))
        first_char = self.Bfile.readat(1, 0)
        last_char = self.Bfile.readat(1,(l-1))
        self.Afile.close()
        self.Bfile.close()
        if first_char == 'S' and last_char == 'E': 
            removefile(self.Afn)
        else: 
            removefile(self.Bfn)
            
    
    #file = self.Bfile.readat(None, 0)
    #data = len(file)
    #first_char = file[0]
    #last_char = file[-1]
    

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
